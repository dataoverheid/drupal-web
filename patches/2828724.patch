diff --git a/core/modules/user/src/Controller/UserController.php b/core/modules/user/src/Controller/UserController.php
index dd172448acc2ebcb01034b5d8e973b5a7f38dc51..48c668b4a987439d5480fade0a67de51a8091457 100644
--- a/core/modules/user/src/Controller/UserController.php
+++ b/core/modules/user/src/Controller/UserController.php
@@ -130,23 +130,20 @@ public function resetPass(Request $request, $uid, $timestamp, $hash) {
         );
       }
       // A different user is already logged in on the computer.
+      /** @var \Drupal\user\UserInterface $reset_link_user */
+      if ($this->validPassResetHash($uid, $timestamp, $hash) && $reset_link_user = $this->userStorage->load($uid)) {
+        $this->messenger()
+          ->addWarning($this->t('Another user (%other_user) is already logged into the site on this computer. Please <a href=":logout">log out</a> and try using the link again.',
+            [
+              '%other_user' => $account->getAccountName(),
+              ':logout' => Url::fromRoute('user.logout')->toString(),
+            ]));
+      }
       else {
-        /** @var \Drupal\user\UserInterface $reset_link_user */
-        if ($reset_link_user = $this->userStorage->load($uid)) {
-          $this->messenger()
-            ->addWarning($this->t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href=":logout">log out</a> and try using the link again.',
-              [
-                '%other_user' => $account->getAccountName(),
-                '%resetting_user' => $reset_link_user->getAccountName(),
-                ':logout' => Url::fromRoute('user.logout')->toString(),
-              ]));
-        }
-        else {
-          // Invalid one-time link specifies an unknown user.
-          $this->messenger()->addError($this->t('The one-time login link you clicked is invalid.'));
-        }
-        return $this->redirect('<front>');
+        // Invalid one-time link specifies an unknown user.
+        $this->messenger()->addError($this->t('The one-time login link you clicked is invalid.'));
       }
+      return $this->redirect('<front>');
     }

     $session = $request->getSession();
@@ -196,6 +193,25 @@ public function getResetPassForm(Request $request, $uid) {

     // Time out, in seconds, until login URL expires.
     $timeout = $this->config('user.settings')->get('password_reset_timeout');
+    $current = \Drupal::time()->getRequestTime();
+    // Check whether the link has expired.
+    if ($current - $timestamp > $timeout) {
+      $this->messenger()
+        ->addError($this->t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
+      return $this->redirect('user.pass');
+    }
+    // Check whether the password reset URL is valid.
+    if (!$this->validPassResetHash($uid, $timestamp, $hash)) {
+      $current_user = \Drupal::currentUser();
+      if ($current_user->isAuthenticated() && $user != $current_user) {
+        // Another user is logged in, deny access. The parameters will be in
+        // the watchdog's URL for the administrator to check.
+        throw new AccessDeniedHttpException();
+      }
+      // Link is not valid.
+      $this->messenger()->addError($this->t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
+      return $this->redirect('user.pass');
+    }

     $expiration_date = $user->getLastLoginTime() ? $this->dateFormatter->format($timestamp + $timeout) : NULL;
     return $this->formBuilder()->getForm(UserPasswordResetForm::class, $user, $expiration_date, $timestamp, $hash);
@@ -221,25 +237,14 @@ public function getResetPassForm(Request $request, $uid) {
    */
   public function resetPassLogin($uid, $timestamp, $hash) {
     // The current user is not logged in, so check the parameters.
-    $current = REQUEST_TIME;
     /** @var \Drupal\user\UserInterface $user */
     $user = $this->userStorage->load($uid);

-    // Verify that the user exists and is active.
     if ($user === NULL || !$user->isActive()) {
-      // Blocked or invalid user ID, so deny access. The parameters will be in
-      // the watchdog's URL for the administrator to check.
-      throw new AccessDeniedHttpException();
-    }
-
-    // Time out, in seconds, until login URL expires.
-    $timeout = $this->config('user.settings')->get('password_reset_timeout');
-    // No time out for first time login.
-    if ($user->getLastLoginTime() && $current - $timestamp > $timeout) {
       $this->messenger()->addError($this->t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
       return $this->redirect('user.pass');
     }
-    elseif ($user->isAuthenticated() && ($timestamp >= $user->getLastLoginTime()) && ($timestamp <= $current) && hash_equals($hash, user_pass_rehash($user, $timestamp))) {
+    if ($this->validPassResetHash($uid, $timestamp, $hash)) {
       user_login_finalize($user);
       $this->logger->notice('User %name used one-time login link at time %timestamp.', ['%name' => $user->getDisplayName(), '%timestamp' => $timestamp]);
       $this->messenger()->addStatus($this->t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
@@ -263,6 +268,29 @@ public function resetPassLogin($uid, $timestamp, $hash) {
     return $this->redirect('user.pass');
   }

+  /**
+   * Validate a password reset request.
+   *
+   * @param int $uid
+   *   User ID of the user requesting reset.
+   * @param int $timestamp
+   *   The current timestamp.
+   * @param string $hash
+   *   Login link hash.
+   *
+   * @return bool
+   *   Returns TRUE if the password reset request is valid.
+   *
+   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   *   If $uid is for a blocked user or invalid user ID.
+   */
+  protected function validPassResetHash($uid, $timestamp, $hash) {
+    /** @var \Drupal\user\UserInterface $user */
+    $user = $this->userStorage->load($uid);
+    $current = \Drupal::time()->getRequestTime();
+    return isset($user) && $user->isAuthenticated() && ($timestamp >= $user->getLastLoginTime()) && ($timestamp <= $current) && hash_equals($hash, user_pass_rehash($user, $timestamp)) && $user->isActive();
+  }
+
   /**
    * Redirects users to their profile page.
    *
diff --git a/core/modules/user/src/Entity/User.php b/core/modules/user/src/Entity/User.php
index dfffbfbb009bfe18190aa9518836c5a8203c5c3c..95727e42da183410070d9dba55deab9f6d5aa9c1 100644
--- a/core/modules/user/src/Entity/User.php
+++ b/core/modules/user/src/Entity/User.php
@@ -578,4 +578,19 @@ public static function getAllowedConfigurableLanguageCodes() {
     return array_keys(\Drupal::languageManager()->getLanguages(LanguageInterface::STATE_CONFIGURABLE));
   }

+  /**
+   * Masks the account username.
+   *
+   * Only the first and last character are shown, the other characters are
+   * replaced by asterisks.
+   *
+   * @return string
+   *   Masked account username.
+   */
+  public function maskUsername() {
+    $accountName = $this->getAccountName();
+    $length = strlen($accountName);
+    return $accountName[0] . str_repeat('*', $length - 2) . $accountName[$length - 1];
+  }
+
 }
diff --git a/core/modules/user/src/Form/UserPasswordResetForm.php b/core/modules/user/src/Form/UserPasswordResetForm.php
index a53c716e20d4004abb3b9d7ffa8db1cf20999d1b..c37a3594b83e82de08320dc8844b545bc33a6a39 100644
--- a/core/modules/user/src/Form/UserPasswordResetForm.php
+++ b/core/modules/user/src/Form/UserPasswordResetForm.php
@@ -42,12 +42,21 @@ public function getFormId() {
    */
   public function buildForm(array $form, FormStateInterface $form_state, AccountInterface $user = NULL, $expiration_date = NULL, $timestamp = NULL, $hash = NULL) {
     if ($expiration_date) {
-      $form['message'] = ['#markup' => $this->t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', ['%user_name' => $user->getAccountName(), '%expiration_date' => $expiration_date])];
+      $form['message'] = [
+        '#markup' => $this->t('<p>This is a one-time login for %user_name_mask and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', [
+          '%user_name_mask' => $user->maskUsername(),
+          '%expiration_date' => $expiration_date,
+        ]),
+      ];
       $form['#title'] = $this->t('Reset password');
     }
     else {
       // No expiration for first time login.
-      $form['message'] = ['#markup' => $this->t('<p>This is a one-time login for %user_name.</p><p>Click on this button to log in to the site and change your password.</p>', ['%user_name' => $user->getAccountName()])];
+      $form['message'] = [
+        '#markup' => $this->t('<p>This is a one-time login for %user_name_mask.</p><p>Click on this button to log in to the site and change your password.</p>', [
+          '%user_name_mask' => $user->maskUsername(),
+        ]),
+      ];
       $form['#title'] = $this->t('Set password');
     }

diff --git a/core/modules/user/tests/src/Functional/UserPasswordResetTest.php b/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
index 0b91f2bb76d8870dbe0de94c63e633b20c33bb4c..fa44212d6dd2e7ae23f7322bb5d10988c5f34aa4 100644
--- a/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
+++ b/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
@@ -130,7 +130,7 @@ public function testUserPasswordReset() {
     $this->assertSession()->responseHeaderDoesNotExist('X-Drupal-Cache');

     // Check the one-time login page.
-    $this->assertText($this->account->getAccountName());
+    $this->assertSession()->pageTextContains($this->account->maskUsername());
     $this->assertText('This login can be used only once.');
     $this->assertSession()->titleEquals('Reset password | Drupal');

@@ -152,8 +152,8 @@ public function testUserPasswordReset() {
     // Log out, and try to log in again using the same one-time link.
     $this->drupalLogout();
     $this->drupalGet($resetURL);
-    $this->submitForm([], 'Log in');
-    $this->assertText('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.');
+    $this->assertSession()->addressEquals(Url::fromRoute('user.pass'));
+    $this->assertSession()->pageTextContains('You have tried to use a one-time login link that has expired. Please request a new one using the form below.');

     // Request a new password again, this time using the email address.
     // Count email messages before to compare with after.
@@ -178,11 +178,11 @@ public function testUserPasswordReset() {
     $bogus_timestamp = REQUEST_TIME - $timeout - 60;
     $_uid = $this->account->id();
     $this->drupalGet("user/reset/$_uid/$bogus_timestamp/" . user_pass_rehash($this->account, $bogus_timestamp));
-    $this->submitForm([], 'Log in');
+    $this->assertSession()->addressEquals(Url::fromRoute('user.pass'));
     $this->assertText('You have tried to use a one-time login link that has expired. Please request a new one using the form below.');

     // Create a user, block the account, and verify that a login link is denied.
-    $timestamp = REQUEST_TIME - 1;
+    $timestamp = \Drupal::time()->getRequestTime() - 1;
     $blocked_account = $this->drupalCreateUser()->block();
     $blocked_account->save();
     $this->drupalGet("user/reset/" . $blocked_account->id() . "/$timestamp/" . user_pass_rehash($blocked_account, $timestamp));
@@ -204,8 +204,8 @@ public function testUserPasswordReset() {
     $this->account->setEmail("1" . $this->account->getEmail());
     $this->account->save();
     $this->drupalGet($old_email_reset_link);
-    $this->submitForm([], 'Log in');
-    $this->assertText('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.');
+    $this->assertSession()->addressEquals(Url::fromRoute('user.pass'));
+    $this->assertSession()->pageTextContains('You have tried to use a one-time login link that has expired. Please request a new one using the form below.');

     // Verify a password reset link will automatically log a user when /login is
     // appended.
@@ -220,15 +220,15 @@ public function testUserPasswordReset() {
     // Ensure blocked and deleted accounts can't access the user.reset.login
     // route.
     $this->drupalLogout();
-    $timestamp = REQUEST_TIME - 1;
+    $timestamp = \Drupal::time()->getRequestTime() - 1;
     $blocked_account = $this->drupalCreateUser()->block();
     $blocked_account->save();
     $this->drupalGet("user/reset/" . $blocked_account->id() . "/$timestamp/" . user_pass_rehash($blocked_account, $timestamp) . '/login');
-    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('You have tried to use a one-time login link that has expired. Please request a new one using the form below.');

     $blocked_account->delete();
     $this->drupalGet("user/reset/" . $blocked_account->id() . "/$timestamp/" . user_pass_rehash($blocked_account, $timestamp) . '/login');
-    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('You have tried to use a one-time login link that has expired. Please request a new one using the form below.');
   }

   /**
@@ -332,7 +332,7 @@ public function testUserPasswordResetLoggedIn() {
     $this->drupalLogin($this->account);
     $this->drupalGet($resetURL);
     $this->assertRaw(new FormattableMarkup(
-      'Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href=":logout">log out</a> and try using the link again.',
+      'Another user (%other_user) is already logged into the site on this computer. Please <a href=":logout">log out</a> and try using the link again.',
       ['%other_user' => $this->account->getAccountName(), '%resetting_user' => $another_account->getAccountName(), ':logout' => Url::fromRoute('user.logout')->toString()]
     ));

@@ -554,11 +554,11 @@ public function testResetImpersonation() {
     $reset_url = user_pass_reset_url($user1);
     $attack_reset_url = str_replace("user/reset/{$user1->id()}", "user/reset/{$user2->id()}", $reset_url);
     $this->drupalGet($attack_reset_url);
-    $this->submitForm([], 'Log in');
+    $this->assertSession()->addressEquals(Url::fromRoute('user.pass'));
     // Verify that the invalid password reset page does not show the user name.
     $this->assertNoText($user2->getAccountName());
     $this->assertSession()->addressEquals('user/password');
-    $this->assertText('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.');
+    $this->assertSession()->pageTextContains('You have tried to use a one-time login link that has expired. Please request a new one using the form below.');
   }

 }
