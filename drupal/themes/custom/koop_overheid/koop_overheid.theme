<?php

/**
 * @file
 * Functions to support theming in the koop_overheid theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_theme().
 */
function koop_overheid_theme($existing, $type, $theme, $path) {
  return [
    'form_element_description' => [
      'template' => 'form/form-element-description',
      'variables' => [
        'element_id' => '',
        'content' => '',
      ],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function koop_overheid_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $routeMatch = \Drupal::routeMatch();
  $routeName = $routeMatch->getRouteName();
  $node = $routeMatch->getParameter('node');

  if (in_array($routeName, [
    'system.401',
    'system.403',
    'system.404',
    'donl_custom_http_4xx',
  ])) {
    $suggestions[] = 'page__4xx';
  }

  elseif ($routeName === 'ckan.dataset.datasources') {
    $suggestions[] = 'page__dataset__sources';
  }

  elseif ($routeName === 'ckan.dataset.order') {
    $suggestions[] = 'page__dataset__bronnen__herordenen';
  }

  elseif (strpos($routeName, 'donl_search.search') === 0) {
    $suggestions[] = 'page__searchpage';
  }

  elseif (in_array($routeName, [
    'donl_statistics.charts.view',
    'donl_statistics.charts.community.view',
  ])) {
    $suggestions[] = 'page__statistics';
  }

  elseif (in_array($routeName, [
    'ckan.dataset.create',
    'ckan.dataset.edit',
    'ckan.dataset.delete',
    'ckan.dataset.datasources',
    'ckan.dataset.publish',
    'ckan.resource.create',
    'ckan.resource.edit',
    'ckan.resource.delete',
    'donl_form.node.publish',
  ])) {
    $suggestions[] = 'page__wizard';
  }

  elseif (($routeName === 'node.add' && ($nodeType = $routeMatch->getParameter('node_type')) && ($type = $nodeType->get('type'))) || (in_array($routeName, ['entity.node.edit_form', 'entity.node.delete_form']) && $node && ($type = $node->getType()))) {
    if (in_array($type, ['appliance', 'dataservice'])) {
      $suggestions[] = 'page__wizard';
    }
  }

  elseif (in_array($routeName, [
      'ckan.dataset.view',
      'donl.application',
      'donl.datarequest',
      'donl.dataservice',
      'donl_community.search',
    ]) || strpos($routeName, 'donl_community.search.') === 0 || preg_match('/^donl_community.[a-zA-Z0-9]*.view$/', $routeName) || preg_match('/^donl_search.(organization|group|catalog)[.a-zA-Z0-9]*.view$/', $routeName)) {
    $suggestions[] = 'page__search_detail';
  }

  elseif (in_array($routeName, [
    'donl.profile.view',
    'entity.user.canonical',
    'user.page',
  ])) {
    $suggestions[] = 'page__profiel';
  }

  elseif (in_array($routeName, [
    'entity.node.canonical',
    'entity.node.edit_form',
  ])) {
    $suggestions[] = 'page';
  }

  if ($node) {
    $contentType = $node->bundle();
    $suggestions[] = 'page__' . $contentType;
  }

  // We don't want this suggestion on non community pages.
  if (!$node || ($node && $node->bundle() !== 'community')) {
    if (($key = array_search('page__community', $suggestions, TRUE)) !== NULL) {
      unset($suggestions[$key]);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function koop_overheid_preprocess_page(&$variables, $hook) {
  if (isset($variables['node']) && $variables['node']->getType() === 'community' && $menuList = $variables['node']->get('menu')) {
    $variables['page']['menu'] = [];
    /** @var Drupal\link\Plugin\Field\FieldType\LinkItem $item */
    foreach ($menuList as $item) {
      /** @var Drupal\Core\Url $url */
      $variables['page']['menu'][] = [
        'title' => $item->getValue()['title'],
        'url' => $item->getUrl()->toString(),
      ];
    }
  }
}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function koop_overheid_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (!empty($variables['element']['#type'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#type'];
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function koop_overheid_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function koop_overheid_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  foreach (['radios', 'checkboxes'] as $type) {
    if (isset($element['#type']) && ($element['#type'] == $type)) {
      $suggestions[] = 'fieldset__' . $type . '_group';
    }
  }

  if (isset($element['#attributes']['data-radio-inline-wrapper'])) {
    $suggestions[] = 'fieldset__radios_group__inline';
  }

  if (isset($element['#attributes']['data-checkbox-many-wrapper'])) {
    $suggestions[] = 'fieldset__checkboxes_group__many';
  }
}

/**
 * Implements hook_preprocess_node__NODETYPE().
 */
function koop_overheid_preprocess_node__landingpage(array &$variables) {
  koop_overheid_inject_sidebar_content($variables);

  // Preprocess the image field.
  if ($variables['node']->field_landingpage_image->entity) {
    $variables['image_url'] = file_url_transform_relative(file_create_url($variables['node']->get('field_landingpage_image')->entity->uri->value));
  }
}

function createRelation(&$variables, $fieldName) {
  $relations = $variables['node']->get($fieldName)
    ->getValue();
  if ($relations) {
    $variables['relations'][$fieldName] = [];
    $variables['hasRelations'] = TRUE;
    foreach ($relations as $relation) {
      $node = Node::load($relation['target_id']);
      $node->label();
      $variables['relations'][$fieldName][] = $node->toLink();
    }
  }
}

/**
 * Implements hook_preprocess_node__NODETYPE().
 */
function koop_overheid_preprocess_node__recent(array &$variables) {
  if ($variables['node']) {
    if (($image = $variables['node']->get('header')->entity) && $style = ImageStyle::load('header_1920x480')) {
      $variables['header'] = $style->buildUrl($image->get('uri')
        ->getString());
    }
    $variables['relations_name_map'] = [
      'relation_recent_community' => t('Communities'),
      'relation_recent_catalog' => t('Catalogs'),
      'relation_recent_dataservice' => t('Dataservices'),
      'relation_recent_dataset' => t('Datasets'),
      'relation_recent_datarequest' => t('Datarequests'),
      'relation_recent_group' => t('Groups'),
    ];
    foreach ($variables['relations_name_map'] as $fieldName => $name) {
      if ($fieldName === 'relation_recent_dataset') {
        $relations = $variables['node']->get($fieldName)->getValue();

        if ($relations) {
          $variables['relations'][$fieldName] = [];
          $variables['hasRelations'] = TRUE;
          foreach ($relations as $relation) {
            if ($result = Drupal::service('donl_search.request')->getDatasetResultByIdentifier($relation['value'])) {
              $variables['relations'][$fieldName][] = Link::fromTextAndUrl($result->title, $result->url);
            }
          }
        }
      }
      else {
        createRelation($variables, $fieldName);
      }
    }
  }
}

/**
 * Inject blocks from the sidebar regions into the node itself.
 *
 * @param array $variables
 */
function koop_overheid_inject_sidebar_content(array &$variables) {
  $entityTypeManager = Drupal::entityTypeManager();
  foreach (['sidebar_left', 'sidebar_right'] as $region) {
    $blocks = $entityTypeManager
      ->getStorage('block')
      ->loadByProperties([
        'theme' => 'koop_overheid',
        'region' => $region,
      ]);
    uasort($blocks, 'Drupal\block\Entity\Block::sort');

    // Capture viewable blocks and their settings to $build.
    $build = [];
    foreach ($blocks as $key => $block) {
      if ($block->access('view')) {
        $build[$key] = $entityTypeManager
          ->getViewBuilder('block')
          ->view($block);
      }
    }

    $variables[$region] = $build;
  }

  // Determine if there is sidebar content.
  $variables['left_sidebar_filled'] = FALSE;
  $variables['right_sidebar_filled'] = FALSE;
  if (!empty($variables['sidebar_left']) || !empty($variables['content']['field_left_sidebar']['#items'])) {
    $variables['left_sidebar_filled'] = TRUE;
  }
  if (!empty($variables['sidebar_right']) || !empty($variables['content']['field_right_sidebar']['#items'])) {
    $variables['right_sidebar_filled'] = TRUE;
  }
  if ($variables['left_sidebar_filled'] || $variables['right_sidebar_filled']) {
    // Add a variable to the paragraph fields, so they can alter their paragraph
    // children's viewmode.
    koop_overheid_paragraphs_view_mode_sidebar($variables);
  }
}

/**
 *
 */
function koop_overheid_paragraphs_view_mode_sidebar(array &$variables) {
  // Add a variable to the paragraph fields, so they can alter their paragraph
  // children's viewmode.
  $element = new Element();
  if (!empty($variables['content']['field_paragraphs'])) {
    foreach ($element->children($variables['content']['field_paragraphs']) as $i) {
      $variables['content']['field_paragraphs'][$i]['#view_mode'] = 'sidebar_present';
    }
  }
  if (!empty($variables['content']['field_left_sidebar']['#items'])) {
    foreach ($element->children($variables['content']['field_left_sidebar']) as $i) {
      $variables['content']['field_left_sidebar'][$i]['#view_mode'] = 'sidebar';
    }
  }
  if (!empty($variables['content']['field_right_sidebar']['#items'])) {
    foreach ($element->children($variables['content']['field_right_sidebar']) as $i) {
      $variables['content']['field_right_sidebar'][$i]['#view_mode'] = 'sidebar';
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function koop_overheid_preprocess_paragraph__homepage_block(&$variables) {
  $var = $variables;
  template_preprocess_paragraph($var);
  $content = $var['content'];

  /* @var \Drupal\image\Plugin\Field\FieldType\ImageItem $imageItem */
  if ($imageItem = $content['field_homepage_block_image'][0]['#item']) {
    if ($img = File::load($imageItem->getValue()['target_id'])) {
      $variables['image_url'] = file_url_transform_relative(file_create_url($img->getFileUri()));
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function koop_overheid_preprocess_paragraph__voetnoot(&$variables) {
  $var = $variables;
  template_preprocess_paragraph($var);
  $content = $var['content'];

  /* @var \Drupal\Core\Field\FieldItemList $itemlist */
  if ($itemlist = $content['field_id']['#items']) {
    $variables['id'] = $itemlist->getValue()[0]['value'];
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function koop_overheid_preprocess_paragraph__highlight(&$variables) {
  $var = $variables;
  template_preprocess_paragraph($var);
  $content = $var['content'];

  if (isset($content['highlight_image'][0]) && $imageItem = $content['highlight_image'][0]['#item']) {
    $variables['image_alt'] = (!empty($imageItem->getValue('alt')['alt'])) ? $imageItem->getValue('alt')['alt'] : $variables['link_title'];
    if ($img = File::load($imageItem->getValue()['target_id'])) {
      $variables['image_url'] = file_url_transform_relative(file_create_url($img->getFileUri()));
    }
  }

  /* @var \Drupal\Core\Field\FieldItemList $itemlist */
  if ($itemlist = $content['highlight_link']['#items']) {
    $variables['link_title'] = $itemlist->title;
    $url = Url::fromUri($itemlist->uri);
    if ($url->toUriString() === 'route:<none>') {
      $url = '#';
    }
    $variables['link_url'] = $url;
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function koop_overheid_preprocess_paragraph__treeview_child(&$variables) {
  $var = $variables;
  template_preprocess_paragraph($var);
  $content = $var['content'];

  /* @var \Drupal\Core\Field\FieldItemList $itemlist */
  if ($itemlist = $content['field_treeview_link']['#items']) {
    $variables['link_title'] = $itemlist->title;
    $url = Url::fromUri($itemlist->uri);
    if ($url->toUriString() === 'route:<none>') {
      $url = '#';
    }
    $variables['link_url'] = $url;
  }

  if (isset($content['field_treeview_child'])) {
    $variables['content']['field_treeview_child'][0]['#view_mode'] = 'nested';
  }
}

/**
 * Implements hook_preprocess_HOOK() for link list paragraph templates.
 */
function koop_overheid_preprocess_paragraph__linklist_block(&$variables) {
  $paragraph = $variables['paragraph'] ?? NULL;
  if ($paragraph && $paragraph instanceof ParagraphInterface) {
    if ($type = $paragraph->get('field_type')->getValue()[0]['value'] ?? NULL) {
      $variables['type'] = $type;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function koop_overheid_preprocess_block(array &$variables) {
  /* @var \Drupal\block_content\Entity\BlockContent $content */
  if (isset($variables['content']['#block_content'])) {
    $content = $variables['content']['#block_content'];
    /* @var \Drupal\Core\Field\EntityReferenceFieldItemList $type */
    $type = $content->get('type');
    if (isset($type->getValue()[0]['target_id']) && $type->getValue()[0]['target_id'] === 'tabs_block') {
      $variables['#cache']['max-age'] = 0;
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function koop_overheid_preprocess_form_element(&$variables) {
  $element = &$variables['element'];

  // Wrap these form elements inside labels.
  if (isset($element['#type']) && in_array($element['#type'], [
      'radio',
      'checkbox',
    ])) {
    $variables['label_wrapper'] = TRUE;
    $variables['label_title'] = $variables['label']['#title'];

    $variables['label_open'] = $variables['label'];
    $variables['label_open']['#theme'] = 'form_element_label__open';
  }

  if (isset($element['#id'], $variables['description']['content'])) {
    $description = [
      '#theme' => 'form_element_description',
      '#element_id' => $element['#id'],
      '#content' => $variables['description']['content'],
    ];

    if (isset($variables['description']['attributes'])) {
      $description['#attributes'] = $variables['description']['attributes'];
    }

    $variables['description'] = $description;
  }
}

/**
 * Implements hook_preprocess_input().
 */
function koop_overheid_preprocess_input(&$variables) {
  $element = $variables['element'];
  $variables['attributes']['class'][] = 'input';

  // Add the correct error classes to the input element.
  if (isset($element['#errors'])) {
    if (($key = array_search('error', $variables['attributes']['class'])) !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }
    $variables['attributes']['class'][] = 'input--error';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function koop_overheid_preprocess_field(array &$variables, $hook) {
  switch ($variables['element']['#field_name']) {
    case 'field_block_paragraphs':
      foreach ($variables['items'] as $key => $item) {
        $variables['items'][$key]['content']['#view_mode'] = 'sidebar';
      }
      break;

    case 'field_referentie_teruglink':
      /* @var \Drupal\Core\Url $url */
      $url = $variables['items'][0]['content']['#url'];
      $url = $url->toString();
      $variables['url'] = $url;
      $variables['title'] = $variables['items'][0]['content']['#title'];
      break;

    case 'field_tab_link':
      foreach ($variables['items'] as $key => $item) {
        /* @var \Drupal\Core\Url $url */
        if ($url = $item['content']['#url']) {
          $uri = $url->toString();
          $currentPath = \Drupal::service('path.current')->getPath();
          $aliasedPath = \Drupal::service('path.alias_manager')
            ->getAliasByPath($currentPath);
          $variables['items'][$key]['content']['#attributes']['role'] = 'tab';
          if ($uri === $aliasedPath || $uri === $currentPath) {
            $variables['items'][$key]['content']['#attributes']['aria-selected'] = 'true';
            break;
          }
        }
      }
      break;

  }
}

/**
 * Implements hook_form_alter().
 */
function koop_overheid_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, [
      'user_login_form',
      'user_pass',
    ]) && isset($form['actions']['submit'])) {
    $form['actions']['submit']['#button_type'] = 'primary';
  }
  elseif ($form_id === 'user_register_form' && isset($form['actions']['next'])) {
    $form['actions']['next']['#button_type'] = 'primary';
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function koop_overheid_theme_suggestions_alter(array &$suggestions, array $variables) {
  $element = &$variables['element'];
  if (isset($element['#type']) && $element['#type'] === 'form') {
    if (in_array($element['#form_id'], [
      'node_dataservice_form',
      'node_dataservice_edit_form',
    ])) {
      $suggestions[] = 'form__node_dataservice';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function koop_overheid_form_node_form_alter(&$form, FormStateInterface $form_state) {
  unset($form['advanced'], $form['simple_sitemap'], $form['revision_information'], $form['revision'], $form['revision_log'], $form['meta'], $form['author']);
}

/**
 * Implements theme_form_user_login_form_alter()
 *
 * To add route names as classes.
 */
function koop_overheid_preprocess_html(&$variables) {
  $variables['route_name'] = \Drupal::routeMatch()->getRouteName();
}
